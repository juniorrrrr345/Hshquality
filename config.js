const mongoose = require('mongoose');
require('dotenv').config();

// Connexion MongoDB avec options am√©lior√©es
const mongoOptions = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    maxPoolSize: 10,
    serverSelectionTimeoutMS: 5000,
};

mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/telegram-bot', mongoOptions)
    .then(() => {
        console.log('‚úÖ Connect√© √† MongoDB');
        console.log('üìç Database:', mongoose.connection.name);
    })
    .catch(err => {
        console.error('‚ùå Erreur connexion MongoDB:', err);
        process.exit(1);
    });

// Sch√©ma pour la configuration du bot
const configSchema = new mongoose.Schema({
    botId: { type: String, default: 'main', unique: true, required: true },
    welcomeMessage: { type: String, default: "ü§ñ Bienvenue {firstname} sur notre bot!\n\nUtilisez les boutons ci-dessous pour naviguer." },
    welcomeImage: { type: String, default: null },
    infoText: { type: String, default: "‚ÑπÔ∏è Informations\n\nCeci est la section d'informations du bot." },
    miniApp: {
        url: { type: String, default: null },
        text: { type: String, default: "üéÆ Mini Application" }
    },
    socialNetworks: [{
        name: String,
        url: String,
        emoji: String
    }],
    socialButtonsPerRow: { type: Number, default: 3 },
    lastModified: { type: Date, default: Date.now }
}, { timestamps: true });

const Config = mongoose.model('BotConfig', configSchema);

// Configuration par d√©faut - LANATIONDULAIT
const defaultConfig = {
    botId: 'main',
    welcomeMessage: "ü•õ Bienvenue {firstname} chez LANATIONDULAIT!\n\n" +
                    "üè™ Votre destination privil√©gi√©e pour d√©couvrir une s√©lection unique de produits laitiers de qualit√©.\n\n" +
                    "‚ú® Explorez notre boutique et profitez de nos offres exclusives!\n\n" +
                    "Utilisez les boutons ci-dessous pour naviguer.",
    welcomeImage: null,
    infoText: "‚ÑπÔ∏è **√Ä propos de LANATIONDULAIT**\n\n" +
              "ü•õ **Notre Mission**\n" +
              "Nous sommes votre destination privil√©gi√©e pour d√©couvrir une s√©lection unique de produits laitiers de qualit√© sup√©rieure.\n\n" +
              "üåü **Nos Services**\n" +
              "‚Ä¢ Produits laitiers frais et de qualit√©\n" +
              "‚Ä¢ Livraison rapide et s√©curis√©e\n" +
              "‚Ä¢ Service client disponible 24/7\n" +
              "‚Ä¢ Garantie satisfaction\n\n" +
              "üìû **Contact**\n" +
              "Email: contact@lanationdulait.com\n" +
              "Support: @lanationdulait_support\n\n" +
              "üöö **Livraison**\n" +
              "Livraison gratuite √† partir de 50‚Ç¨ d'achat!\n\n" +
              "_Merci de votre confiance!_ üôè",
    miniApp: {
        url: "https://lanationdulait.vercel.app",
        text: "üõçÔ∏è Visiter la Boutique"
    },
    socialNetworks: [
        { name: "Boutique en ligne", url: "https://lanationdulait.vercel.app", emoji: "üõçÔ∏è" },
        { name: "Canal Telegram", url: "https://t.me/lanationdulait", emoji: "üì¢" },
        { name: "Support", url: "https://t.me/lanationdulait_orders", emoji: "üí¨" },
        { name: "Instagram", url: "https://instagram.com/lanationdulait", emoji: "üì∑" },
        { name: "Facebook", url: "https://facebook.com/lanationdulait", emoji: "üëç" },
        { name: "WhatsApp", url: "https://wa.me/message/LANATION", emoji: "üíö" }
    ],
    socialButtonsPerRow: 3
};

// Charger la configuration depuis MongoDB
async function loadConfig() {
    try {
        console.log('üìñ Chargement de la configuration...');
        let config = await Config.findOne({ botId: 'main' }).lean();
        
        // Forcer la mise √† jour avec la config LANATIONDULAIT si n√©cessaire
        if (!config || config.welcomeMessage.includes('Bienvenue {firstname} sur notre bot!')) {
            console.log('üîÑ Mise √† jour vers la configuration LANATIONDULAIT...');
            await Config.deleteOne({ botId: 'main' });
            config = await Config.create(defaultConfig);
            console.log('‚úÖ Configuration LANATIONDULAIT appliqu√©e');
            return config.toObject();
        }
        
        console.log('‚úÖ Configuration charg√©e:', {
            welcomeMessage: config.welcomeMessage?.substring(0, 50) + '...',
            welcomeImage: config.welcomeImage ? 'D√©finie' : 'Non d√©finie',
            socialNetworks: config.socialNetworks?.length || 0,
            lastModified: config.lastModified
        });
        
        return config;
    } catch (error) {
        console.error('‚ùå Erreur lors du chargement de la configuration:', error);
        return defaultConfig;
    }
}

// Sauvegarder la configuration dans MongoDB
async function saveConfig(configData) {
    try {
        console.log('üíæ Sauvegarde de la configuration...');
        
        // Nettoyer les donn√©es avant sauvegarde
        const dataToSave = {
            botId: 'main',
            welcomeMessage: configData.welcomeMessage,
            welcomeImage: configData.welcomeImage,
            infoText: configData.infoText,
            miniApp: configData.miniApp,
            socialNetworks: configData.socialNetworks,
            socialButtonsPerRow: configData.socialButtonsPerRow || 3,
            lastModified: new Date()
        };
        
        const config = await Config.findOneAndUpdate(
            { botId: 'main' },
            { $set: dataToSave },
            { 
                new: true, 
                upsert: true,
                runValidators: true
            }
        );
        
        console.log('‚úÖ Configuration sauvegard√©e avec succ√®s');
        console.log('üìù D√©tails sauvegard√©s:', {
            welcomeMessage: config.welcomeMessage?.substring(0, 50) + '...',
            welcomeImage: config.welcomeImage ? 'D√©finie' : 'Non d√©finie',
            socialNetworks: config.socialNetworks?.length || 0
        });
        
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors de la sauvegarde de la configuration:', error);
        return false;
    }
}

// R√©initialiser la configuration (utile pour debug)
async function resetConfig() {
    try {
        await Config.deleteOne({ botId: 'main' });
        const newConfig = await Config.create(defaultConfig);
        console.log('üîÑ Configuration r√©initialis√©e');
        return newConfig.toObject();
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©initialisation:', error);
        return defaultConfig;
    }
}

// Obtenir l'URL d'une image (stock√©e dans Cloudinary ou base64)
function getImagePath(imageUrl) {
    return imageUrl; // Retourne directement l'URL ou file_id Telegram
}

module.exports = {
    loadConfig,
    saveConfig,
    resetConfig,
    getImagePath,
    Config, // Exporter le mod√®le pour debug si n√©cessaire
    IMAGES_DIR: null // Plus utilis√© avec MongoDB
};